/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface ControllerInterface extends utils.Interface {
  functions: {
    "balances(address)": FunctionFragment;
    "depositCD(address,address)": FunctionFragment;
    "destruct(address,address)": FunctionFragment;
    "increaseLockTime(address,address,uint256)": FunctionFragment;
    "lockTime(address)": FunctionFragment;
    "withdraw(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "balances"
      | "depositCD"
      | "destruct"
      | "increaseLockTime"
      | "lockTime"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(
    functionFragment: "depositCD",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "destruct",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLockTime",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lockTime", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositCD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "destruct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseLockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export interface Controller extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    depositCD(
      _contract: string,
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    destruct(
      _contract: string,
      _account: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseLockTime(
      _contract: string,
      _account: string,
      _seconds: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockTime(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      _contract: string,
      _account: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  depositCD(
    _contract: string,
    _to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  destruct(
    _contract: string,
    _account: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseLockTime(
    _contract: string,
    _account: string,
    _seconds: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockTime(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    _contract: string,
    _account: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    depositCD(
      _contract: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    destruct(
      _contract: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseLockTime(
      _contract: string,
      _account: string,
      _seconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockTime(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _contract: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    depositCD(
      _contract: string,
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    destruct(
      _contract: string,
      _account: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseLockTime(
      _contract: string,
      _account: string,
      _seconds: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockTime(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _contract: string,
      _account: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositCD(
      _contract: string,
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    destruct(
      _contract: string,
      _account: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseLockTime(
      _contract: string,
      _account: string,
      _seconds: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockTime(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _contract: string,
      _account: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
